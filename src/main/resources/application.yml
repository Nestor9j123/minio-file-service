server:
  port: ${PORT:8080}

spring:
  application:
    name: minio-file-service
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
      enabled: true
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

# MinIO Configuration
minio:
  url: ${MINIO_URL:http://localhost:9000}
  accessKey: ${MINIO_ACCESS_KEY:minioadmin}
  secretKey: ${MINIO_SECRET_KEY:minioadmin}
  bucket:
    songs: ${MINIO_BUCKET_SONGS:file-service-songs}
    images: ${MINIO_BUCKET_IMAGES:file-service-images}
    videos: ${MINIO_BUCKET_VIDEOS:file-service-videos}
    photos: ${MINIO_BUCKET_PHOTOS:file-service-photos}
    documents: ${MINIO_BUCKET_DOCUMENTS:file-service-documents}
    archives: ${MINIO_BUCKET_ARCHIVES:file-service-archives}
    files: ${MINIO_BUCKET_FILES:file-service-files}

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: MinIO File Management API
    description: A comprehensive file management service using MinIO for storage. Supports PDF, documents, images, videos, audio files and more.
    version: 1.0.0
    contact:
      name: File Service Team
      email: support@fileservice.com

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: always
  server:
    port: ${MANAGEMENT_PORT:8081}

# Logging
logging:
  level:
    io.minio: INFO
    nitchcorp.backend.titan.shared.minio: DEBUG
    org.apache.pdfbox: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
logging:
  level:
    root: INFO
    nitchcorp.backend.titan.shared.minio: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
logging:
  level:
    root: WARN
    nitchcorp.backend.titan.shared.minio: INFO
  file:
    name: /app/logs/file-service.log
